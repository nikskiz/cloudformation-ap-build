Description:
    This template creates the service for the ECS cluster.

Parameters:

    ECSStackName:
        Description: The ECS Stack Name
        Type: String

    VPCStackName:
          Description: The stackname for the VPC creation
          Type: String

    LoadBalancerStackName:
          Description: The stackname for the loadbalancer
          Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 3

    AWSRDSHostname:
        Description: Hostname of the RDS
        Type: String

    AWSRDSUserName:
        Description: Materusername that was created for the RDS Stack
        Type: String

    AWSRDSPassword:
        Description: Materusername password that was created for the RDS Stack
        Type: String

    DataBaseName:
        Description: Database name the application requires to connect to
        Type: String

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    ECRURL:
        Description: The ECR URL which the contains the docker image
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster:
              Fn::ImportValue:
                  !Sub "${ECSStackName}-ECSCluster"
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            HealthCheckGracePeriodSeconds: 300
            LoadBalancers:
                - ContainerName: "assembly-payments"
                  ContainerPort: 8080
                  TargetGroupArn:
                      Fn::ImportValue:
                          !Sub "${LoadBalancerStackName}-DefaultTargetGroup"

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: assembly-payments
            ExecutionRoleArn:
                Fn::ImportValue:
                    !Sub "${ECSStackName}-ECSRole"
            ContainerDefinitions:
                - Name: assembly-payments
                  Essential: true
                  Image: !Ref ECRURL
                  Cpu: 128
                  Memory: 128
                  Environment:
                    - Name: AWS_RDS_HOSTNAME
                      Value: !Ref AWSRDSHostname
                    - Name: AWS_RDS_USERNAME
                      Value: !Ref AWSRDSUserName
                    - Name: AWS_RDS_PASSWORD
                      Value: !Ref AWSRDSPassword
                    - Name: DATABASE_NAME
                      Value: !Ref DataBaseName
                  PortMappings:
                    - ContainerPort: 8080
                      # HostPort: 8080
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn:
                Fn::ImportValue:
                  !Sub "${LoadBalancerStackName}-ListenerARN"

            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref Path
            Actions:
                - TargetGroupArn:
                    Fn::ImportValue:
                        !Sub "${LoadBalancerStackName}-DefaultTargetGroup"
                  Type: forward

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }

    ServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - Fn::ImportValue:
                      !Sub "${ECSStackName}-ECSCluster"
                  - !GetAtt Service.Name
            RoleARN:
                Fn::ImportValue:
                    !Sub "${ECSStackName}-ECSServiceAutoScalingRole"
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    ServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization greater than 90%
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value:
                  Fn::ImportValue:
                      !Sub "${ECSStackName}-ECSCluster"

            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '3'
            Threshold: '90'
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
            - !Ref ServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization less than 70%
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value:
                  Fn::ImportValue:
                      !Sub "${ECSStackName}-ECSCluster"
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '10'
            Threshold: '70'
            ComparisonOperator: LessThanThreshold
            AlarmActions:
            - !Ref ServiceScaleInPolicy
